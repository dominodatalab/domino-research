version: '3.2'
services:
  minio:
    image: minio/minio
    container_name: mlflow-minio
    environment:
      - "MINIO_ROOT_USER=${AWS_ACCESS_KEY_ID}"
      - "MINIO_ROOT_PASSWORD=${AWS_SECRET_ACCESS_KEY}"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    ports:
      - 9000:9000
    command: "server /data"
    volumes:
    - ./artifactdata:/data
    networks:
    - mlflow

  createbuckets:
    image: minio/mc
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      until (/usr/bin/mc config host add myminio http://minio:9000 ${AWS_ACCESS_KEY_ID} ${AWS_SECRET_ACCESS_KEY}) do echo '...waiting...' && sleep 1; done;
      /usr/bin/mc mb --ignore-existing myminio/${AWS_BUCKET_NAME};
      /usr/bin/mc policy set public myminio/${AWS_BUCKET_NAME};
      exit 0;
      "
    networks:
    - mlflow

  db:
    restart: always
    image: mysql/mysql-server:5.7.28
    container_name: mlflow-db
    expose:
    - "3306"
    environment:
    - MYSQL_DATABASE=mlflow
    - MYSQL_USER=user
    - MYSQL_PASSWORD=pass
    - MYSQL_ROOT_PASSWORD=rootpass
    volumes:
    - ./dbdata:/var/lib/mysql
    networks:
    - mlflow
  mlflow:
    container_name: mlflow-server
    image: tracker_ml
    build:
      context: .
      dockerfile: Dockerfile
    ports:
    - "5000:5000"
    environment: 
    - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
    - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    - MLFLOW_S3_ENDPOINT_URL=http://minio:9000
    - MLFLOW_S3_IGNORE_TLS=true
    networks:
    - mlflow
    entrypoint: mlflow server --backend-store-uri mysql+pymysql://user:pass@db:3306/mlflow --default-artifact-root s3://${AWS_BUCKET_NAME}/ -h 0.0.0.0
    depends_on:
      - db
      - createbuckets

networks:
  mlflow:
    driver: bridge
