version: '3.2'
services:
  minio:
    image: minio/minio
    container_name: mlflow-minio
    environment:
      - "MINIO_ROOT_USER=AKIAIfoobar"
      - "MINIO_ROOT_PASSWORD=deadbeef"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    ports:
      - 9000:9000
    command: "server /data"
    volumes:
    - ./mlflowArtifactData:/data
    networks:
    - mlflow

  createbuckets:
    container_name: mlflow-createbuckets
    image: minio/mc
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      until (/usr/bin/mc config host add myminio http://minio:9000 AKIAIfoobar deadbeef) do echo '...waiting...' && sleep 1; done;
      /usr/bin/mc mb --ignore-existing --region us-east-2 myminio/local-mlflow-artifacts;
      /usr/bin/mc policy set public myminio/local-mlflow-artifacts;
      exit 0;
      "
    networks:
    - mlflow

  db:
    restart: always
    image: mysql/mysql-server:5.7.28
    container_name: mlflow-db
    expose:
    - "3306"
    environment:
    - MYSQL_DATABASE=mlflow
    - MYSQL_USER=user
    - MYSQL_PASSWORD=pass
    - MYSQL_ROOT_PASSWORD=rootpass
    volumes:
    - ./mlflowDBData:/var/lib/mysql
    networks:
    - mlflow

  mlflow:
    container_name: mlflow-server
    image: local-mlflow
    build:
      context: .
      dockerfile: Dockerfile
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5555/health"]
      interval: 2s
      timeout: 60s
    ports:
    - "5555:5555"
    environment: 
    - AWS_ACCESS_KEY_ID=AKIAIfoobar
    - AWS_SECRET_ACCESS_KEY=deadbeef
    - MLFLOW_S3_ENDPOINT_URL=http://minio:9000
    - MLFLOW_S3_IGNORE_TLS=true
    networks:
    - mlflow
    entrypoint: mlflow server --backend-store-uri mysql+pymysql://user:pass@db:3306/mlflow --default-artifact-root s3://local-mlflow-artifacts/ -h 0.0.0.0 -p 5555
    depends_on:
      - db
      - createbuckets
  
  seed-mlflow:
    image: seed-mlflow
    container_name: mlflow-seed-models
    build:
      context: seed_models
      dockerfile: Dockerfile
    environment: 
    - AWS_ACCESS_KEY_ID=AKIAIfoobar
    - AWS_SECRET_ACCESS_KEY=deadbeef
    - MLFLOW_S3_ENDPOINT_URL=http://minio:9000
    - MLFLOW_S3_IGNORE_TLS=true
    networks:
    - mlflow
    depends_on:
      - mlflow

networks:
  mlflow:
    name: mlflow
    driver: bridge
